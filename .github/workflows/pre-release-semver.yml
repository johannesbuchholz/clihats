name: Add pre-release semver
# Add implied version tag (pre-release) on every commit on every branch that is not master and not release and does not already possess a tag.
on: 
  push:
    branches-ignore:
      - master
      - release
    tags-ignore:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
      - '[0-9]+.[0-9]+.[0-9]+*'
jobs:
  semver:
    name: Compute semantic version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic-version.outputs.version }}
      version_tag: ${{ steps.semantic-version.outputs.version_tag }}
      previous_version: ${{ steps.semantic-version.outputs.previous_version }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: paulhatch/semantic-version@v5.0.2
      id: semantic-version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "/(?:!:|Breaking Change:)/"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: "i"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "/(?:feat|feature:)/"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: "i"
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}+${increment}"
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: true
  add-tag:
    name: Add semver tag
    needs: semver
    runs-on: ubuntu-latest
    env:
      VERSION_IMPLIED: ${{needs.semver.outputs.version}}
      VERSION_TAG: ${{needs.semver.outputs.version_tag}}
      PREVIOUS_VERSION: ${{needs.semver.outputs.previous_version}}
    steps:
    - uses: actions/checkout@v3
    - name: Print computed versions
      run: |
        echo "Implied version $VERSION_IMPLIED"
        echo "Version         $VERSION_TAG"
        echo "Change          $PREVIOUS_VERSION -> $VERSION_IMPLIED"
    - name: Set git config
      run: |
        git config user.name "github action"
        git config user.email "<>"
    - name: Add implied tag
      if: success()
      run: |
        git tag -a $VERSION_IMPLIED -m "Automatic versioning from github action: $VERSION_IMPLIED"
        git push --tags
